import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

# 1. Пример Датасета (ЗАМЕНИТЕ ЭТИМ СВОИ ДАННЫЕ!)
data = [
    {"Тема": "Основы программирования", "Сложность": 1, "Важность": 5, "Пререквизиты": []},
    {"Тема": "Типы данных и структуры", "Сложность": 2, "Важность": 5, "Пререквизиты": ["Основы программирования"]},
    {"Тема": "Алгоритмы сортировки", "Сложность": 3, "Важность": 4, "Пререквизиты": ["Типы данных и структуры"]},
    {"Тема": "Алгоритмы поиска", "Сложность": 3, "Важность": 4, "Пререквизиты": ["Типы данных и структуры"]},
    {"Тема": "Динамическое программирование", "Сложность": 5, "Важность": 5, "Пререквизиты": ["Алгоритмы сортировки", "Алгоритмы поиска"]},
    {"Тема": "Графы и их обход", "Сложность": 4, "Важность": 4, "Пререквизиты": ["Типы данных и структуры"]},
    {"Тема": "Структуры данных: Деревья", "Сложность": 4, "Важность": 4, "Пререквизиты": ["Типы данных и структуры"]},
    {"Тема": "Структуры данных: Кучи", "Сложность": 4, "Важность": 4, "Пререквизиты": ["Типы данных и структуры"]},
    {"Тема": "Геометрия", "Сложность": 5, "Важность": 3, "Пререквизиты": ["Основы программирования"]},
]

df = pd.DataFrame(data)

# 2. Функция построения образовательной траектории (Топологическая сортировка)

def build_trajectory_topological(data):
    trajectory = []
    remaining = {item["Тема"]: set(item["Пререквизиты"]) for item in data}

    while remaining:
        ready = [topic for topic, prereqs in remaining.items() if prereqs.issubset(trajectory)]
        if not ready:
            raise ValueError("Циклические зависимости в данных!")

        trajectory.extend(ready)
        for topic in ready:
            del remaining[topic]

    return trajectory

trajectory = build_trajectory_topological(data)

# 3. Визуализация графа зависимостей

def visualize_dependency_graph(data, trajectory):
    """Визуализирует граф зависимостей и подсвечивает траекторию."""
    graph = nx.DiGraph()
    for item in data:
        topic = item["Тема"]
        graph.add_node(topic)
        for prereq in item["Пререквизиты"]:
            graph.add_edge(prereq, topic)

    pos = nx.spring_layout(graph, seed=42)  # Разные layouts можно попробовать

    # Подсветка траектории
    path_edges = []
    for i in range(len(trajectory) - 1):
        if graph.has_edge(trajectory[i], trajectory[i+1]):
            path_edges.append((trajectory[i], trajectory[i+1]))

    plt.figure(figsize=(12, 8))
    nx.draw(graph, pos, with_labels=True, node_size=3000, node_color="skyblue", font_size=10, font_weight="bold", arrowsize=20)
    nx.draw_networkx_edges(graph, pos, edgelist=path_edges, edge_color="red", width=2, arrowsize=20)  # Подсветка ребер траектории

    plt.title("Граф зависимостей между темами (траектория - красным)")
    plt.show()

visualize_dependency_graph(data, trajectory)

# 4. Метрики траектории и вычислительная сложность (в Markdown)
